:root {
    --bg-color: var(--color-primary-base);
    --text-color: white;
    --flow-space: 1em;
}

.flow > * + * {
    margin-top: var(--flow-space, 1em);
}
.drag-handle {
    display: flex;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 1rem;
    min-height: 1rem;
    max-height: 1rem;
    background: url("/ui/denim-dark-090.png") repeat;
    background-blend-mode: screen;
    background-color: rgba(0, 0, 0, 1);
}
.draggable {
    cursor: move;
}
.padding {
    padding: var(--padding);
}

button i {
    display: grid;
    place-content: center;
    margin: 0;
}
.tag-chip {
    display: inline-flex;
    padding: 0.15rem 0.55rem;
    width: fit-content;
}

button.img-button {
    --bg-color: transparent;
    background: none;
    background-color: transparent;
    width: fit-content;
    height: fit-content;
    &:hover {
        background-color: var(--bg-color);
    }
    img {
        --bg-color: transparent;
        max-width: 3rem;
        // filter: inherit;
        // filter: drop-shadow(2px 4px 6px black);
        // transition: filter 150ms ease-in;
    }
    &.framed {
        --bg-color: transparent;
        position: relative;
        img {
            clip-path: circle(50%);
        }
        &:before {
            content: "";
            position: absolute;
            width: 100%;
            height: 100%;
            background-image: url("/modules/hud-and-trackers/images/Button Badges/Frames & Borders/circle-frame.webp");
        }
    }
}

.minimize {
    transform: scaleY(0);
    opacity: 0;
    height: fit-content;
    pointer-events: auto;
    display: flex;
    flex-direction: column;
    transform-origin: top center;
    transition: transform 100ms ease-out, opacity 100ms ease-out;
}

.fit-content-width {
    width: fit-content;
}
.hover-reveal {
    position: relative;
    & > &--child {
        opacity: 0;
        transition: opacity 250ms ease-in;
    }
    &:hover {
        .hover-reveal--child {
            opacity: 100%;
        }
    }
}
.hover-reveal-right {
    position: relative;
    &:hover {
        .hover-reveal-right-child {
            opacity: 100%;
        }
    }
    &-child {
        position: absolute;
        opacity: 0;
        left: 100%;
        top: 0;
    }
}
.hover-reveal-up {
    position: relative;
    &:hover,
    &.open {
        .hover-reveal-up-child {
            opacity: 1;
            // transform: scale(1);
        }
    }
    &-child {
        position: absolute;
        bottom: 100%;
        left: 0;
        transform-origin: bottom center;
        // transform: scale(0);
        opacity: 0;
        transition: opacity 150ms ease-out backdrop-filter 150ms ease-out;
        // transition: transform 150ms ease-out;
    }
}
.interactive {
    cursor: pointer;
}

.list-item {
    display: grid;
    grid-template-columns: minmax(20px, 2rem) 1fr;
    grid-template-rows: 100%;
    align-items: center;
    overflow: hidden;
    max-height: 50px;
    padding-right: 0.5rem;
    *:first-child {
        grid-column: 1/2;
        object-fit: cover;
        height: 100%;
    }
    *:nth-child(2) {
        margin: 0;
        grid-column: 2/3;
    }
    &[data-variant="child-buttons"] {
        //variant with item-specific buttons at the end, like "delete/remove"
        grid-template-columns: minmax(20px, 2rem) 1fr 2rem;
        grid-template-rows: 100%;
        *:last-child {
            grid-column: 3/4;
        }
    }
}

.bg-none {
    background: none;
    background-color: transparent;
}

.bg-neutral-base {
    background-color: var(--color-neutral-base);
}
.bg-neutral-darkest {
    background-color: var(--color-neutral-darkest);
}
.bg-neutral-lightest {
    background-color: var(--color-neutral-lightest);
}
.bg-glass {
    transition: background-color 100ms ease-in backdrop-filter 100ms ease-in;
    background-color: var(--color-glass-no-blur);
    @supports (backdrop-filter: blur(12px)) {
        background-color: var(--color-glass-blur);
        backdrop-filter: blur(12px) opacity(1);
    }
    border: 1px solid var(--color-glass-border);
}

.hover-grow {
    transition: transform 150ms ease-in;
    &:hover {
        transform: scale(1.2);
    }
}
.hover-bg-primary {
    transition: background-color 150ms ease-in;
    &:hover {
        background-color: var(--color-secondary-base);
    }
}
.hover-bg-secondary {
    transition: background-color 150ms ease-in;
    &:hover {
        background-color: var(--color-secondary-base);
    }
}
.hover-bg-removable {
    transition: background-color 150ms ease-in;
    &:hover {
        background-color: var(--color-danger-base);
    }
}
.hover-bg-none {
    &:hover {
        background: none;
        background-color: transparent;
    }
}
.hover-bg-dynamic {
    transition: background-color 150ms ease-in;
    &:hover {
        background-color: var(--bg-color);
    }
}
.focus-bg-none {
    &:focus {
        background: none;
        background-color: transparent;
    }
}

.hover-disabled {
    &:disabled {
        cursor: not-allowed;
    }
}
.brighten-on-open {
    &.open {
        filter: brightness(1.2);
    }
}
.glow-on-open {
    &.open {
        filter: drop-shadow(0 0 0.75rem crimson);
    }
}
.child-glow-on-open {
    &.open {
        > img {
            filter: drop-shadow(0 0 0.75rem crimson);
        }
    }
}
.drop-shadow {
    filter: drop-shadow(2px 2px 3px rgba(0, 0, 0, 0.35));
}
.text-shadow {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.shadow-none {
    box-shadow: var(--shadow-none);
}

.shadow-lowest {
    box-shadow: var(--shadow-lowest);
}
.shadow-base {
    box-shadow: var(--shadow-base);
}

.shadow-highest {
    box-shadow: var(--shadow-highest);
}
.shadow-circle {
    filter: drop-shadow(2px 4px 6px black);
    transition: filter 150ms ease-in;
}

.scroll-y {
    overflow-y: scroll;
}

.scroll-x {
    overflow-x: scroll;
}

.hidden-overflow-y {
    overflow-y: hidden;
}
.hidden-overflow-x {
    overflow-x: hidden;
}

.square {
    width: 2rem;
    height: 2rem;
}
.square-medium {
    width: 4rem;
    height: 4rem;
}
.square-large {
    width: 6rem;
    height: 6rem;
}

.before-color-overlay {
    &:before {
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        background-color: var(--bg-color);
        mix-blend-mode: color;
        opacity: 20%;
        transition: opacity 100ms ease-in;
    }
}
.before-hover-opacity {
    &:hover {
        &:before {
            opacity: 100%;
        }
    }
}
.rounded-outer-children {
    &:first-child button {
        border-top-left-radius: 8px;
        border-bottom-left-radius: 8px;
    }
    &:last-child button {
        border-top-right-radius: 8px;
        border-bottom-right-radius: 8px;
    }
}

.horizontal-button-wrapper {
    display: flex;
    align-items: center;
    justify-content: space-evenly;
}

.button-list {
    display: flex;

    li {
        list-style-type: none;
    }
}

.header {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 1rem;
}

.config-wrapper {
    display: flex;
    background-color: $jet-5;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
}

.drawer-visible {
    right: unset;
    left: 0px;
}

.side-drawer {
    position: absolute;
    right: 100%;
    z-index: 200;
    width: 50%;

    .tab {
        position: absolute;
        left: 100%;
        top: 50%;
        width: 3rem;
        height: 3rem;
        background-color: var(--color-secondary-base);
        color: white;
        z-index: 200;
    }
}

.justify-self-right {
    margin-left: auto;
}
.grid-auto-rows {
    display: grid;
    grid-auto-rows: max-content;
    grid-template-columns: repeat(4, minmax(0, 25%));
    gap: 0.5rem;
}

.flex-row {
    display: flex;
    flex-direction: row;
}

.flex-col {
    display: flex;
    flex-direction: column;
}

.flex-centered {
    display: flex;
    justify-content: center;
    align-items: center;
}

.chip-span {
    display: inline-flex;
    justify-content: space-evenly;
    height: fit-content;
    width: 100%;
    gap: 0.5rem;
    padding: 0.5rem;
}

.wrap {
    flex-wrap: wrap;
}

//text
.text-centered {
    text-align: center;
}

//wether filled or ghost
//what color the background is
//what color the border is
//what color the text is

.ghost {
    background-color: transparent;
    color: var(--color-primary-base);
    border: 1px solid white;
    border-color: var(--color-primary-base);

    &:hover {
        border-color: var(--color-secondary-base);
        color: var(--color-secondary-base);
    }
}

.filled {
    background-color: var(--color-primary-base);
    border-color: var(--color-primary-base);
    color: white;
    transition: border-color 100ms ease-in, background-color 100ms ease-in;

    &:hover {
        background-color: var(--color-secondary-base);
        border-color: var(--color-secondary-base);
    }
}

//for things like removing tags with a click
.remove-on-click {
    position: relative;

    &:before {
        position: absolute;
        pointer-events: none;
        width: 100%;
        height: 100%;
        border-radius: inherit;
        background-color: rgb(255, 92, 63);
        content: "Remove?";
        opacity: 0;
        transition: opacity 100ms ease-in;
    }

    &:hover {
        &:before {
            opacity: 100%;
        }
    }
}

.bg-accent {
    background-color: var(--color-secondary-base);
    border-color: var(--color-primary-base);
}

.overflow-hidden {
}
.overflow-visible {
}

.sharp-corners {
    border-radius: 0px;
}

.rounded {
    border-radius: 8px;
}

.slight-rounded {
    border-radius: 5px;
}

.cap-rounded {
    border-radius: 999px;
}

// #region Colors

.text-white {
    color: white;
}

.text-warning {
    color: rgb(255, 92, 63);
}

.text-primary {
    color: var(--color-primary-base);
}

.text-accent {
    color: var(--color-secondary-base);
}

.border-primary {
    border-color: var(--color-primary-base);
}

.border-accent {
    border-color: var(--color-secondary-base);
}

[data-type="art"] {
    --accent-color: blue;
}

[data-type="frame"] {
    --accent-color: red;
}

// #endregion

.hover-shadow {
    &:before {
        pointer-events: none;
        position: absolute;
        width: 100%;
        height: 100%;
        content: "";
        border-radius: inherit;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.25);
        opacity: 0%;
        transition: opacity 100ms ease-out;
    }

    &:hover {
        &:before {
            opacity: 100%;
        }
    }
}

.window-padding {
    padding: clamp(0.5rem, 0.5rem + 1vw, 1rem) clamp(0.5rem, 0.5rem + 1vh, 1rem);
}

.window-gap {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.input-and-label-wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.file-input-wrapper {
    display: flex;
    max-width: 100%;

    button {
        //grow none, shrink normal scale
        flex: 1 1 auto;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
        height: 100%;
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    input {
        //max, min, ideal
        //grow normal scale, shrink none
        flex: 1 0 auto;
        max-width: 60%;
        height: 100%;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
}
